{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { DevNetworks } from '../../services/Networks';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/web3.service\";\nimport * as i2 from \"@angular/material/form-field\";\nimport * as i3 from \"@angular/material/select\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/core\";\n\nfunction ServiceTokenPaymentSelectorComponent_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵelement(1, \"img\", 7);\n    i0.ɵɵelementStart(2, \"span\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const paymentToken_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵproperty(\"id\", paymentToken_r2.address)(\"value\", i_r3);\n    i0.ɵɵattribute(\"data-index\", i_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", paymentToken_r2.image, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(paymentToken_r2.symbol);\n  }\n}\n\nexport let ServiceTokenPaymentSelectorComponent = /*#__PURE__*/(() => {\n  class ServiceTokenPaymentSelectorComponent {\n    constructor(web3Service) {\n      //algunas veces manda networkId como un numero y otras como un hexadecimal como texto, funcionan la bsc y eter\n      //porque coincide en ambos pero al cambiar a polygon o harmony peta. Lo he intentado convirtiendo a hex primero \n      //con this.networdId.toFixed(16) y luego con este código de abajo. Sigue petando a veces, hay que unificar todo,\n      //no podemos mandar un number y en network.js tener hexadecimales.\n      this.web3Service = web3Service;\n      this.networks = DevNetworks;\n      this.currentToken = 0;\n      this.networkId = 0;\n      this.selectedTokenAddres = new EventEmitter();\n      this.acceptedPaymentTokens = this.networks[this.networkId].acceptedPaymentTokens;\n      const res = this.networks.find(x => x.params.chainId == \"0x\" + (\"0\" + Number(this.networkId).toString(16)).slice(-2).toUpperCase());\n      if (res) this.networkId = res.index;\n      this.acceptedPaymentTokens = this.networks[this.networkId].acceptedPaymentTokens; // this.acceptedPaymentTokens = this.networks[this.networkId].acceptedPaymentTokens;\n      // console.log({a: this.networkId});\n    }\n\n    ngOnInit() {} // tslint:disable-next-line:typedef\n\n\n    OnPaymentTokenSelectChange(changeEvent) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = this.networks.find(x => x.params.chainId == \"0x\" + (\"0\" + Number(this.networkId).toString(16)).slice(-2).toUpperCase());\n        if (res) this.networkId = res.index;\n        console.log({\n          i: this.networkId\n        }); // this.selectedTokenAddres.emit({...this.networks[this.networkId].acceptedPaymentTokens[changeEvent.value], id:changeEvent.value});\n        // this.currentToken = changeEvent.value;\n      });\n    }\n\n  }\n\n  ServiceTokenPaymentSelectorComponent.ɵfac = function ServiceTokenPaymentSelectorComponent_Factory(t) {\n    return new (t || ServiceTokenPaymentSelectorComponent)(i0.ɵɵdirectiveInject(i1.Web3Service));\n  };\n\n  ServiceTokenPaymentSelectorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ServiceTokenPaymentSelectorComponent,\n    selectors: [[\"app-service-token-payment-selector\"]],\n    inputs: {\n      networkId: \"networkId\"\n    },\n    outputs: {\n      selectedTokenAddres: \"selectedTokenAddres\"\n    },\n    decls: 10,\n    vars: 4,\n    consts: [[\"appearance\", \"fill\", 2, \"text-align\", \"center\"], [\"panelClass\", \"my-select-panel-class\", 3, \"value\", \"selectionChange\", \"valueChange\"], [\"matRef\", \"\"], [2, \"width\", \"25px\", \"height\", \"25px\", 3, \"src\"], [2, \"margin-left\", \"5px !important\", \"font-weight\", \"bold\", \"color\", \"white\"], [3, \"id\", \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"value\"], [\"alt\", \"payment currency\", 2, \"width\", \"25px\", \"height\", \"25px\", 3, \"src\"], [2, \"margin-left\", \"5px !important\", \"font-weight\", \"bold\"]],\n    template: function ServiceTokenPaymentSelectorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n        i0.ɵɵelementStart(1, \"mat-label\");\n        i0.ɵɵtext(2, \"Currencies\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-select\", 1, 2);\n        i0.ɵɵlistener(\"selectionChange\", function ServiceTokenPaymentSelectorComponent_Template_mat_select_selectionChange_3_listener($event) {\n          return ctx.OnPaymentTokenSelectChange($event);\n        })(\"valueChange\", function ServiceTokenPaymentSelectorComponent_Template_mat_select_valueChange_3_listener($event) {\n          return ctx.currentToken = $event;\n        });\n        i0.ɵɵelementStart(5, \"mat-select-trigger\");\n        i0.ɵɵelement(6, \"img\", 3);\n        i0.ɵɵelementStart(7, \"span\", 4);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, ServiceTokenPaymentSelectorComponent_mat_option_9_Template, 4, 5, \"mat-option\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"value\", ctx.currentToken);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"src\", ctx.networks[ctx.networkId].acceptedPaymentTokens[ctx.currentToken].image, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.networks[ctx.networkId].acceptedPaymentTokens[ctx.currentToken].symbol);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.acceptedPaymentTokens);\n      }\n    },\n    directives: [i2.MatFormField, i2.MatLabel, i3.MatSelect, i3.MatSelectTrigger, i4.NgForOf, i5.MatOption],\n    styles: [\"\"]\n  });\n  return ServiceTokenPaymentSelectorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}