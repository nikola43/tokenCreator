{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { SnackBarColorEnum } from 'src/utils/NotificationUtil';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/web3.service\";\nimport * as i3 from \"src/utils/NotificationUtil\";\nimport * as i4 from \"@angular/material/card\";\n\nconst Web3 = require('web3');\n\nexport let WhitelistBlacklistComponent = /*#__PURE__*/(() => {\n  class WhitelistBlacklistComponent {\n    constructor(formBuilder, web3Service, notificationUtils) {\n      this.formBuilder = formBuilder;\n      this.web3Service = web3Service;\n      this.notificationUtils = notificationUtils;\n      this.whitelistContent = [];\n      this.blacklistContent = [];\n      this.createForm();\n      console.log('getwhitelist', this.web3Service.getTokenBlacklist('0x49F131D0B6B1b618B0dF4D757eC77D9E66553b3e'));\n    }\n\n    ngOnInit() {} // tslint:disable-next-line:typedef\n\n\n    formatLabel(value) {\n      if (value >= 1000) {\n        return Math.round(value / 1000) + 'k';\n      }\n\n      return value + '%';\n    } // tslint:disable-next-line:typedef\n\n\n    onWhitelistTokenAddressKeyup() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const isValid = /^0x[a-fA-F0-9]{40}$/.test(this.listingTokenAddressInputFormGroup.controls.tokenAddress.value);\n\n        if (isValid) {\n          //this.whitelist = this.getWhitelist(this.listingTokenAddressInputFormGroup.controls.tokenAddress.value)\n          this.getWhitelist(this.listingTokenAddressInputFormGroup.controls.tokenAddress.value);\n          this.getBlacklist(this.listingTokenAddressInputFormGroup.controls.tokenAddress.value);\n        }\n      });\n    }\n\n    getWhitelist(address) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.web3Service.getTokenWhitelist(address).then(data => {\n          this.whitelistContent = data;\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    }\n\n    getBlacklist(address) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.web3Service.getTokenBlacklist(address).then(data => {\n          this.blacklistContent = data;\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    addWhitelist() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.checkValue('0xb6e76628BeB7872D2ade6AE9641bb390401c18ef');\n        console.log('addWhitelist', this.web3Service.addAddressWhitelist('0xb6e76628BeB7872D2ade6AE9641bb390401c18ef')); // this.web3Service\n        //   .burnTokens(\n        //     this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value,\n        //     this.burnTokenForm.amount\n        //   )\n        //   .then((r2) => {\n        //     console.log(r2);\n        //   })\n        //   .catch((err) => {\n        //     console.log(err);\n        //   });\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    addBlacklist() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.blacklistContent.push(this.blacklistInputFormGroup.controls.blacklistAddress.value); // this.web3Service\n        //   .burnTokens(\n        //     this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value,\n        //     this.burnTokenForm.amount\n        //   )\n        //   .then((r2) => {\n        //     console.log(r2);\n        //   })\n        //   .catch((err) => {\n        //     console.log(err);\n        //   });\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    deleteFromWhitelist(address) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const index = this.whitelistContent.indexOf(address);\n\n        if (index > -1) {\n          this.whitelistContent.splice(index, 1);\n        }\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    deleteFromBlacklist(address) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const index = this.blacklistContent.indexOf(address);\n\n        if (index > -1) {\n          this.blacklistContent.splice(index, 1);\n        }\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    createForm() {\n      this.whitelistInputFormGroup = this.formBuilder.group({\n        whitelistAddress: [null, [Validators.required, Validators.pattern('^0x[a-fA-F0-9]{40}$')]]\n      });\n      this.blacklistInputFormGroup = this.formBuilder.group({\n        blacklistAddress: [null, [Validators.required, Validators.pattern('^0x[a-fA-F0-9]{40}$')]]\n      });\n      this.listingTokenAddressInputFormGroup = this.formBuilder.group({\n        tokenAddress: [null, [Validators.required, Validators.pattern('^0x[a-fA-F0-9]{40}$')]]\n      });\n    }\n\n    checkValue(address, msg = 'The address is invalid.') {\n      try {\n        const isValid = /^0x[a-fA-F0-9]{40}$/.test(address);\n\n        if (!isValid) {\n          throw new Error(msg);\n        }\n\n        ;\n      } catch (e) {\n        this.notificationUtils.showSnackBar(msg, SnackBarColorEnum.Red);\n      }\n    }\n\n  }\n\n  WhitelistBlacklistComponent.ɵfac = function WhitelistBlacklistComponent_Factory(t) {\n    return new (t || WhitelistBlacklistComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Web3Service), i0.ɵɵdirectiveInject(i3.NotificationUtils));\n  };\n\n  WhitelistBlacklistComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WhitelistBlacklistComponent,\n    selectors: [[\"app-whitelist-blacklist\"]],\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"liquidity-form-container\", \"coming-soon\"]],\n    template: function WhitelistBlacklistComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"h3\");\n        i0.ɵɵtext(2, \"Coming Soon\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i4.MatCard],\n    styles: [\".mat-step-header .mat-step-icon-selected, .mat-step-header[_ngcontent-%COMP%]   .mat-step-icon-state-done[_ngcontent-%COMP%], .mat-step-header[_ngcontent-%COMP%]   .mat-step-icon-state-edit[_ngcontent-%COMP%]{background-color:red!important}  .mat-form-field-appearance-outline .mat-form-field-outline{color:#fff!important}  .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick{color:#39c0ed!important}  .mat-form-field-appearance-outline.mat-form-field-invalid.mat-form-field-invalid .mat-form-field-outline-thick{color:red!important;opacity:.8!important}  .mat-input-element{caret-color:#fff!important}  .mat-form-field-invalid .mat-input-element, .mat-warn[_ngcontent-%COMP%]   .mat-input-element[_ngcontent-%COMP%]{caret-color:#39c0ed!important}  .mat-form-field-label{color:#0009!important}  .mat-form-field.mat-focused .mat-form-field-label{color:red!important}  .mat-form-field.mat-form-field-invalid .mat-form-field-label{color:red!important}.create-token-container[_ngcontent-%COMP%]{backdrop-filter:blur(3px) saturate(150%);-webkit-backdrop-filter:blur(3px) saturate(150%);background-color:#11192882;border-radius:16px;border:1px solid rgba(255,255,255,.125)}.create-tokenButton[_ngcontent-%COMP%]{width:100%;border-radius:16px;font-size:1.5rem;padding:.8rem;background:linear-gradient(-45deg,#ee7752,#ff79ab,#47cfff,#23d5ab)!important}.coming-soon[_ngcontent-%COMP%]{min-height:300px;display:flex;justify-content:center;align-items:center}\"]\n  });\n  return WhitelistBlacklistComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}