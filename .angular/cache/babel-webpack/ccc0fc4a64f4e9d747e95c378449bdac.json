{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { TokenGeneratorAbi } from './TokenGeneratorAbi.js';\nimport { TokenSourceCode } from './TokenSourceCode.js';\nimport { TokenAbi } from './TokenAbi.js';\nimport { MinTokenAbi } from './MinTokenAbi.js';\nimport { PancakeRouterAbi } from './PancakeRouterAbi.js';\nimport { LockLiquidityContractAbi, LockLiquidityContractAddress } from './LockTokenAbi.js';\nimport { PancakeFactoryAbi, PancakeFactoryAddress } from './PancakeFactoryAbi.js';\nimport { LPTokenAbi } from './LPTokenAbi.js';\nimport { BehaviorSubject } from 'rxjs';\nimport { DevNetworks } from './Networks';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n\nconst abi = require('ethereumjs-abi');\n\nconst Web3 = require('web3');\n\nexport let Web3Service = /*#__PURE__*/(() => {\n  class Web3Service {\n    constructor(http) {\n      this.http = http;\n      this.networks = DevNetworks;\n      this.networkId = 0;\n\n      this.sleep = waitTimeInMs => new Promise(resolve => setTimeout(resolve, waitTimeInMs));\n\n      if (window.ethereum === undefined) {\n        alert('Non-Ethereum browser detected. Install MetaMask');\n      } else {\n        if (typeof window.web3 !== 'undefined') {\n          this.web3 = window.web3.currentProvider;\n        } else {\n          this.web3 = new Web3.providers.HttpProvider('http://127.0.0.1:7545');\n        }\n\n        window.web3 = new Web3(window.ethereum);\n        this.enable = this.enableMetaMaskAccount();\n        this.pancakeRouter = new window.web3.eth.Contract(PancakeRouterAbi, this.networks[0].routerAddress); // this.pancakeRouter.methods.WETH().call().then((x) => this.wethAddress = x);\n\n        this.wethAddress = '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd';\n      }\n    }\n\n    setNetworkId(id) {\n      this.currentNetworkIdSubject = new BehaviorSubject(id);\n      this.currentNetworkId = this.currentNetworkIdSubject.asObservable();\n    }\n\n    getWethAddress() {\n      return this.wethAddress;\n    }\n\n    getRouterAddress() {\n      return this.networks[this.networkId].routerAddress;\n    }\n\n    getTokenCreatorAddress() {\n      return this.networks[this.networkId].tokenCreatorContractAddress;\n    } // tslint:disable-next-line:typedef\n\n\n    getEstimatedTokensForBNB(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const pair = yield this.getPair(this.wethAddress, tokenAddress);\n        const lpTokenContract = new window.web3.eth.Contract(LPTokenAbi, pair);\n        return yield lpTokenContract.methods.getReserves().call();\n      });\n    }\n\n    getAccount() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield new Promise((resolve, reject) => {\n          window.web3.eth.getAccounts((err, retAccount) => {\n            if (retAccount.length > 0) {\n              this.currentAccountSubject = new BehaviorSubject(retAccount[0]);\n              this.currentAccount = this.currentAccountSubject.asObservable();\n              this.currentNetworkIdSubject = new BehaviorSubject(0);\n              this.currentNetworkId = this.currentNetworkIdSubject.asObservable();\n              resolve(retAccount[0]);\n            } else {\n              // alert('transfer.service :: getAccount :: no accounts found.');\n              reject('No accounts found.');\n            }\n\n            if (err != null) {\n              // alert('transfer.service :: getAccount :: error retrieving account');\n              reject('Error retrieving account');\n            }\n          });\n        });\n      });\n    }\n\n    enableMetaMaskAccount() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let enable = false;\n        yield new Promise((resolve, reject) => {\n          enable = window.ethereum.enable();\n          this.enable = enable;\n        });\n        return Promise.resolve(enable);\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    createToken(paymentToken, tokenName, tokenSymbol, tokenSupply, tokenDecimals, TxFeePercentToHolders, TxFeePercentToLP, TxFeePercentToBurned, TxFeePercentToWallet, TxFeePercentToBuybackTokens, MaxWalletPercent, MaxTxPercent, FeeReceiverWallet, networkId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log({\n          paymentToken,\n          tokenName,\n          tokenSymbol,\n          tokenSupply,\n          tokenDecimals,\n          TxFeePercentToHolders,\n          TxFeePercentToLP,\n          TxFeePercentToBurned,\n          TxFeePercentToWallet,\n          TxFeePercentToBuybackTokens,\n          MaxWalletPercent,\n          MaxTxPercent,\n          FeeReceiverWallet,\n          networkId\n        });\n        const createdToken = new window.web3.eth.Contract(TokenGeneratorAbi, this.networks[networkId].tokenCreatorContractAddress);\n        tokenSupply = Web3.utils.toWei(tokenSupply.toString(), 'ether');\n        const createPrice = yield createdToken.methods.creationTokenPrice().call();\n        const ownerAddress = yield createdToken.methods.owner().call();\n        const sendedValue = this.currentAccountSubject.value === ownerAddress ? 0 : paymentToken !== this.wethAddress ? 0 : createPrice;\n        const fees = [TxFeePercentToHolders, TxFeePercentToLP, TxFeePercentToBurned, TxFeePercentToWallet, TxFeePercentToBuybackTokens, MaxWalletPercent, MaxTxPercent];\n        const create = yield createdToken.methods.createNewToken(paymentToken, this.currentAccountSubject.value, FeeReceiverWallet, tokenName, tokenSymbol, tokenSupply, tokenDecimals, fees, this.networks[networkId].routerAddress).send({\n          from: this.currentAccountSubject.value,\n          value: sendedValue.toString()\n        });\n        yield this.sleep(5000);\n        const a = yield window.web3.eth.getTransaction(create.transactionHash);\n        const b = yield window.web3.eth.getTransactionReceipt(create.transactionHash);\n        const contractAddress = b.logs[0].address;\n        create.contractAddress = contractAddress;\n        console.log({\n          a: this.networks[networkId].routerAddress\n        });\n        this.verifyContract({\n          tokenName,\n          tokenSymbol,\n          tokenDecimals,\n          tokenSupply,\n          MaxTxPercent,\n          MaxWalletPercent,\n          FeeReceiverWallet,\n          routerAddress: this.networks[networkId].routerAddress\n        }, contractAddress, networkId).subscribe(r => {\n          create.guid = r.result;\n          return create;\n        }, error => {\n          console.log(error);\n        });\n        return create;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    validateAddress(address) {\n      return Web3.utils.isAddress(address);\n    } // tslint:disable-next-line:typedef\n\n\n    getBalance() {\n      return window.web3.eth.getBalance(this.currentAccountSubject.value);\n    } // tslint:disable-next-line:typedef\n\n\n    verifyContract(constructorArguments, contractAddress, networkId) {\n      /*\n            tokenName,\n        tokenSymbol,\n        tokenDecimals,\n        tokenSupply,\n        MaxTxPercent,\n        MaxWalletPercent,\n        FeeReceiverWallet,\n       */\n      console.log({\n        account: this.currentAccountSubject.value,\n        tokenName: constructorArguments.tokenName,\n        tokenSymbol: constructorArguments.tokenSymbol,\n        decimal: constructorArguments.tokenDecimals,\n        amountOfTokenWei: constructorArguments.tokenSupply,\n        MaxTxPercent: constructorArguments.MaxTxPercent,\n        MaxWalletPercent: constructorArguments.MaxWalletPercent,\n        feeWallet: constructorArguments.FeeReceiverWallet,\n        routerAddress: constructorArguments.routerAddress\n      });\n      const encodedConstructorArguments = this.encodeTokenConstructor({\n        account: this.currentAccountSubject.value,\n        tokenName: constructorArguments.tokenName,\n        tokenSymbol: constructorArguments.tokenSymbol,\n        decimal: constructorArguments.tokenDecimals,\n        amountOfTokenWei: constructorArguments.tokenSupply,\n        MaxTxPercent: constructorArguments.MaxTxPercent,\n        MaxWalletPercent: constructorArguments.MaxWalletPercent,\n        feeWallet: constructorArguments.FeeReceiverWallet,\n        routerAddress: constructorArguments.routerAddress\n      });\n      const apiKey = this.networks[networkId].explorerApiKey;\n      console.log({\n        explorerApiKey: apiKey\n      });\n      const data = {\n        apikey: apiKey,\n        module: 'contract',\n        action: 'verifysourcecode',\n        contractaddress: contractAddress,\n        sourceCode: TokenSourceCode,\n        // tslint:disable-next-line:max-line-length\n        codeformat: 'solidity-single-file',\n        // tslint:disable-next-line:max-line-length\n        contractname: 'Token',\n        compilerversion: 'v0.8.10+commit.fc410830',\n        optimizationUsed: 1,\n        // tslint:disable-next-line:max-line-length\n        runs: 200,\n        // tslint:disable-next-line:max-line-length\n        constructorArguements: encodedConstructorArguments,\n        // tslint:disable-next-line:max-line-length\n        evmversion: '',\n        licenseType: '3' // Valid codes 1-12 where 1=No License .. 12=Apache 2.0, see https://BscScan.com/contract-license-types\n\n      };\n      const formData = new FormData();\n      formData.append('apikey', data.apikey);\n      formData.append('module', data.module);\n      formData.append('action', data.action);\n      formData.append('contractaddress', data.contractaddress);\n      formData.append('sourceCode', data.sourceCode);\n      formData.append('codeformat', data.codeformat);\n      formData.append('contractname', data.contractname);\n      formData.append('compilerversion', data.compilerversion);\n      formData.append('optimizationUsed', data.optimizationUsed);\n      formData.append('runs', data.runs);\n      formData.append('constructorArguements', data.constructorArguements);\n      formData.append('evmversion', data.evmversion);\n      formData.append('licenseType', data.licenseType);\n      return this.http.post('https://api-testnet.bscscan.com/api', formData);\n    } // tslint:disable-next-line:typedef\n\n\n    getPair(tokenAddressA, tokenAddressB) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const pancakeFactory = new window.web3.eth.Contract(PancakeFactoryAbi, PancakeFactoryAddress);\n        const getPairResult = yield pancakeFactory.methods.getPair(tokenAddressA, tokenAddressB).call();\n        return getPairResult;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    burnTokens(tokenAddress, amount) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = new window.web3.eth.Contract(TokenAbi, tokenAddress);\n        const burnResult = yield token.methods.burn(Web3.utils.toWei(amount.toString(), 'ether')).send({\n          from: this.currentAccountSubject.value\n        });\n        return burnResult;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    percentage(percent, total) {\n      return percent / 100 * total;\n    } // tslint:disable-next-line:typedef\n\n\n    removeLPTokens(tokenAddress, pairAddress, amount) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const deadline = Math.floor(Date.now() / 1000) + 60 * 10;\n        const LpTokenContract = new window.web3.eth.Contract(LPTokenAbi, pairAddress);\n        const nonce = yield LpTokenContract.methods.nonces(this.currentAccountSubject.value).call();\n        const EIP712Domain = [{\n          name: 'name',\n          type: 'string'\n        }, {\n          name: 'version',\n          type: 'string'\n        }, {\n          name: 'chainId',\n          type: 'uint256'\n        }, {\n          name: 'verifyingContract',\n          type: 'address'\n        }];\n        const domain = {\n          name: 'Pancake LPs',\n          version: '1',\n          chainId: '0x61',\n          verifyingContract: pairAddress\n        };\n        const Permit = [{\n          name: 'owner',\n          type: 'address'\n        }, {\n          name: 'spender',\n          type: 'address'\n        }, {\n          name: 'value',\n          type: 'uint256'\n        }, {\n          name: 'nonce',\n          type: 'uint256'\n        }, {\n          name: 'deadline',\n          type: 'uint256'\n        }];\n        const message = {\n          owner: this.currentAccountSubject.value,\n          spender: this.networks[this.networkId].routerAddress,\n          value: Web3.utils.toWei(amount.toString(), 'ether'),\n          nonce: nonce.toString(16),\n          deadline: deadline.toString()\n        };\n        const dataToSign = JSON.stringify({\n          types: {\n            EIP712Domain,\n            Permit\n          },\n          domain,\n          primaryType: 'Permit',\n          message\n        });\n        let r = '';\n        let s = '';\n        let v = 0;\n        yield window.web3.currentProvider.sendAsync({\n          jsonrpc: '2.0',\n          method: 'eth_signTypedData_v4',\n          id: 999999999999,\n          params: [this.currentAccountSubject.value, dataToSign],\n          from: this.currentAccountSubject.value\n        }, (err, result) => __awaiter(this, void 0, void 0, function* () {\n          if (err) {\n            return console.error(err);\n          }\n\n          const signature = result.result.substring(2);\n          r = '0x' + signature.substring(0, 64);\n          s = '0x' + signature.substring(64, 128);\n          v = parseInt(signature.substring(128, 130), 16);\n          const totalSupply = yield LpTokenContract.methods.totalSupply().call();\n          const totalReserves = yield LpTokenContract.methods.getReserves().call();\n          const Aout = totalReserves[0] * amount / totalSupply;\n          const Bout = totalReserves[1] * amount / totalSupply;\n          const minA = Aout - this.percentage(1, Aout);\n          const minB = Bout - this.percentage(1, Bout);\n          const pancakeRouter = new window.web3.eth.Contract(PancakeRouterAbi, this.networks[this.networkId].routerAddress);\n          const trans = yield pancakeRouter.methods.removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(tokenAddress, Web3.utils.toWei(amount.toString(), 'ether'), Web3.utils.toWei(minB.toString(), 'ether'), Web3.utils.toWei(minA.toString(), 'ether'), this.currentAccountSubject.value, deadline, false, v, r, s).send({\n            from: this.currentAccountSubject.value,\n            value: '0'\n          });\n          return trans;\n        }));\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    addLiquidity(tokenAddress, bnbAmount, tokenAmount, minBnbAmount, minTokenAmount) {\n      return __awaiter(this, void 0, void 0, function* () {\n        bnbAmount = Number(bnbAmount);\n        tokenAmount = Number(tokenAmount);\n        minBnbAmount = Number(minBnbAmount);\n        minTokenAmount = Number(minTokenAmount);\n        const tokenA = this.wethAddress;\n        const tokenB = tokenAddress;\n        const amountADesired = bnbAmount;\n        const amountAMin = minBnbAmount;\n        const amountBDesired = tokenAmount;\n        const amountBMin = minTokenAmount;\n        const to = this.currentAccountSubject.value;\n        const deadline = Math.floor(Date.now() / 1000) + 60 * 10;\n        const addLiquidityResult = yield this.pancakeRouter.methods.addLiquidityETH(tokenB, Web3.utils.toWei(amountBDesired.toString(), 'ether'), // desiredB\n        Web3.utils.toWei(amountBMin.toString(), 'ether'), // minA\n        Web3.utils.toWei(amountAMin.toString(), 'ether'), // minA\n        to, deadline).send({\n          from: this.currentAccountSubject.value,\n          value: Web3.utils.toWei(bnbAmount.toString(), 'ether')\n        });\n        return addLiquidityResult;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    lockLiquidity(tokenAddress, time, tokenAmount) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const lockLiquidityContract = new window.web3.eth.Contract(LockLiquidityContractAbi, LockLiquidityContractAddress);\n        const a = yield lockLiquidityContract.methods.lockTokens(yield this.getPair(this.wethAddress, tokenAddress), this.currentAccountSubject.value, Web3.utils.toWei(tokenAmount.toString(), 'ether'), time).send({\n          from: this.currentAccountSubject.value,\n          value: '80000000000000000'\n        });\n        return a;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    withdrawLockedTokens(lockId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const lockLiquidityContract = new window.web3.eth.Contract(LockLiquidityContractAbi, LockLiquidityContractAddress);\n        return yield lockLiquidityContract.methods.withdrawTokens(lockId).send({\n          from: this.currentAccountSubject.value\n        });\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getLocks() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const lockLiquidityContract = new window.web3.eth.Contract(LockLiquidityContractAbi, LockLiquidityContractAddress);\n        const locksList = yield lockLiquidityContract.methods.getDepositsByWithdrawalAddress(this.currentAccountSubject.value).call();\n        const locksDetails = []; // tslint:disable-next-line:prefer-for-of\n\n        for (let i = 0; i < locksList.length; i++) {\n          const lockDetails = yield lockLiquidityContract.methods.getDepositDetails(locksList[i]).call();\n          lockDetails.id = locksList[i];\n          locksDetails.push(lockDetails);\n        }\n\n        return locksDetails;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getEstimatedTokensForETH(tokenAddress, tokenAmount) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const pancakeRouter = new window.web3.eth.Contract(PancakeRouterAbi, this.networks[this.networkId].routerAddress);\n        const path = yield this.getPathForTokenETH(tokenAddress);\n        const estimatedTokens = yield pancakeRouter.methods.getAmountsIn(Web3.utils.toWei(tokenAmount.toString(), 'ether'), path).call();\n        return estimatedTokens[0];\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getEstimatedETHForTokens(tokenAddress, tokenAmount) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const pancakeRouter = new window.web3.eth.Contract(PancakeRouterAbi, this.networks[this.networkId].routerAddress);\n        const path = yield this.getPathETHForToken(tokenAddress);\n        const estimatedTokens = yield pancakeRouter.methods.getAmountsIn(Web3.utils.toWei(tokenAmount.toString(), 'ether'), path).call();\n        return estimatedTokens[0];\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getPathForTokenETH(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return [tokenAddress, this.wethAddress];\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getPathETHForToken(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return [this.wethAddress, tokenAddress];\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getLPTokensBalance(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const pairAddress = yield this.getPair(this.wethAddress, tokenAddress);\n        const token = new window.web3.eth.Contract(LPTokenAbi, pairAddress);\n        return yield token.methods.balanceOf(this.currentAccountSubject.value).call();\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getTokensBalance(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = new window.web3.eth.Contract(TokenAbi, tokenAddress);\n        return yield token.methods.balanceOf(this.currentAccountSubject.value).call();\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getTokensName(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = new window.web3.eth.Contract(TokenAbi, tokenAddress);\n        return yield token.methods.name().call();\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getTokenWhitelist(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = new window.web3.eth.Contract(TokenAbi, tokenAddress);\n        return yield token.methods.getWhitelist().call();\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getTokenBlacklist(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = new window.web3.eth.Contract(TokenAbi, tokenAddress);\n        return yield token.methods.getBlacklist().call();\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    addAddressWhitelist(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = new window.web3.eth.Contract(TokenAbi, tokenAddress);\n        return yield token.methods.addAddressWhitelist(tokenAddress).call();\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    addAddressBlacklist(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = new window.web3.eth.Contract(TokenAbi, tokenAddress);\n        return yield token.methods.addAddressWhitelist(tokenAddress).call();\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    isAllowed(address, spender) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const pairAddress = yield this.getPair(this.wethAddress, address);\n        const LPTokenBalance = yield this.getLPTokensBalance(address);\n        const isAddresAllowed = window.web3.utils.toWei(yield this.getAddressAllowance(address, spender), 'ether') < window.web3.utils.toWei(LPTokenBalance, 'ether');\n        return isAddresAllowed;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getAddressAllowance(address, spender) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const contract = new window.web3.eth.Contract(MinTokenAbi, address);\n        const contractAllowance = yield contract.methods.allowance(this.currentAccountSubject.value, spender).call(); // 29803630997051883414242659\n\n        return contractAllowance;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    approveToken(address, spender, amount) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const token = new window.web3.eth.Contract(MinTokenAbi, address);\n        const approveResult = yield token.methods.approve(spender, '115792089237316195423570985008687907853269984665640564039457584007913129639935').send({\n          from: this.currentAccountSubject.value\n        });\n        return approveResult;\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    encodeTokenConstructor(data) {\n      console.log({\n        data\n      });\n      /*\n            account: this.currentAccountSubject.value,\n        tokenName: constructorArguments.tokenName,\n        tokenSymbol: constructorArguments.tokenSymbol,\n        decimal: constructorArguments.tokenDecimals,\n        amountOfTokenWei: constructorArguments.tokenSupply,\n        MaxTxPercent: constructorArguments.MaxTxPercent,\n        MaxWalletPercent: constructorArguments.MaxWalletPercent,\n        feeWallet: constructorArguments.FeeReceiverWallet,\n       */\n\n      const x = abi.simpleEncode('constructor(address,string,string,uint8,uint256,uint8,uint8,address,address)', this.currentAccountSubject.value, data.tokenName, data.tokenSymbol, data.decimal, data.amountOfTokenWei, data.MaxWalletPercent, data.MaxTxPercent, data.feeWallet, data.routerAddress);\n      const r = x.toString('hex').substring(8);\n      console.log(r);\n      return r;\n    }\n\n  }\n\n  Web3Service.ɵfac = function Web3Service_Factory(t) {\n    return new (t || Web3Service)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  Web3Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Web3Service,\n    factory: Web3Service.ɵfac,\n    providedIn: 'root'\n  });\n  return Web3Service;\n})();","map":null,"metadata":{},"sourceType":"module"}