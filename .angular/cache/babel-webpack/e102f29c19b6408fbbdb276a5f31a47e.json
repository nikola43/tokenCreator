{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Validators } from '@angular/forms';\nimport { BurnDialogComponent } from '../burn-dialog/burn-dialog.component';\nimport { SnackBarColorEnum } from 'src/utils/NotificationUtil';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/web3.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"src/utils/NotificationUtil\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"../../two-digit-decima-number.directive\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"@angular/material/slider\";\nimport * as i12 from \"angular-emojis\";\nconst _c0 = [\"burnTokenAddress\"];\n\nfunction BurnTokensComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" This field required \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst Web3 = require('web3');\n\nexport let BurnTokensComponent = /*#__PURE__*/(() => {\n  class BurnTokensComponent {\n    constructor(web3Service, formBuilder, dialog, notificationUtils) {\n      this.web3Service = web3Service;\n      this.formBuilder = formBuilder;\n      this.dialog = dialog;\n      this.notificationUtils = notificationUtils;\n      this.burnTokenPercent = 0;\n      this.burnTokenForm = {\n        tokenName: '',\n        amount: 0\n      };\n      this.createForm();\n    }\n\n    ngOnInit() {} // tslint:disable-next-line:typedef\n\n\n    formatLabel(value) {\n      if (value >= 1000) {\n        return Math.round(value / 1000) + 'k';\n      }\n\n      return value + '%';\n    } // tslint:disable-next-line:typedef\n\n\n    onSlideBurn(event) {\n      this.burnTokenPercent = Number(event.value);\n      this.burnTokenForm.amount = this.mapValue(Number(event.value), 0, 100, 0, this.tokenBalance);\n    } // tslint:disable-next-line:typedef\n\n\n    createForm() {\n      this.burnTokenAddressInputFormGroup = this.formBuilder.group({\n        burnTokenAddress: [null, [Validators.required, Validators.pattern('^0x[a-fA-F0-9]{40}$')]]\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    burnTokenInputKeyUp() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // this.tokenBalance = Number(\n        //   Web3.utils.fromWei(\n        //     await this.getTokenBalance(\n        //       this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value\n        //     ),\n        //     'ether'\n        //   )\n        // )\n        //   .toFixed(18)\n        //   .toString();\n        // this.getTokenName(this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value).then((r) => this.burnTokenForm.tokenName = r);\n        // console.log({\n        //   tokenBalance: this.tokenBalance,\n        // });\n        // const value = this.mapValue(\n        //   Number(this.burnTokenForm.amount),\n        //   0,\n        //   this.tokenBalance,\n        //   0,\n        //   100\n        // );\n        // // this.slider.value = value;\n        const isValid = /^0x[a-fA-F0-9]{40}$/.test(this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value);\n\n        if (isValid) {\n          this.tokenBalance = Number(Web3.utils.fromWei(yield this.getTokenBalance(this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value), 'ether')).toFixed(18).toString();\n        } else {\n          this.tokenBalance = 0;\n        }\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    openBurnTokensDialog() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log({\n          tokenAddress: this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value,\n          amount: this.burnTokenForm.amount\n        });\n        this.onClickEvent(this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value);\n        const dialogRef = this.dialog.open(BurnDialogComponent, {\n          data: {\n            tokenAddress: this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value,\n            amount: this.burnTokenForm.amount,\n            tokenName: this.burnTokenForm.tokenName\n          }\n        });\n        dialogRef.afterClosed().subscribe(result => __awaiter(this, void 0, void 0, function* () {\n          if (result) {\n            this.notificationUtils.showSnackBar(`The token ${this.burnTokenForm.tokenName} was burned successfully`, SnackBarColorEnum.Green);\n          }\n\n          this.tokenBalance = Number(Web3.utils.fromWei(yield this.getTokenBalance(this.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value), 'ether')).toFixed(18).toString();\n          this.burnTokenForm.amount = 0;\n        }));\n      });\n    } // tslint:disable-next-line:typedef\n\n\n    getTokenBalance(tokenAddress) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this.web3Service.getTokensBalance(tokenAddress);\n      });\n    }\n\n    onClickEvent(e) {\n      this.tokenAddressInput.nativeElement.focus();\n      return this.checkValue(e, 'Please enter a valid token.');\n    } // tslint:disable-next-line:typedef\n\n\n    mapValue(x, inMin, inMax, outMin, outMax) {\n      return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n    }\n\n    checkValue(address, msg = 'The address is invalid.') {\n      try {\n        const isValid = /^0x[a-fA-F0-9]{40}$/.test(address);\n\n        if (!isValid) {\n          throw new Error(msg);\n        }\n\n        ;\n      } catch (e) {\n        this.notificationUtils.showSnackBar(msg, SnackBarColorEnum.Red);\n      }\n    }\n\n  }\n\n  BurnTokensComponent.ɵfac = function BurnTokensComponent_Factory(t) {\n    return new (t || BurnTokensComponent)(i0.ɵɵdirectiveInject(i1.Web3Service), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.NotificationUtils));\n  };\n\n  BurnTokensComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BurnTokensComponent,\n    selectors: [[\"app-burn-tokens\"]],\n    viewQuery: function BurnTokensComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tokenAddressInput = _t.first);\n      }\n    },\n    decls: 26,\n    vars: 8,\n    consts: [[1, \"liquidity-form-container\"], [1, \"form-container\", 3, \"formGroup\"], [\"appearance\", \"outline\", 2, \"width\", \"100% !important\"], [\"matInput\", \"\", \"maxlength\", \"42\", \"placeholder\", \"e.g. 0xB06a4327FF7dB3D82b51bbD692063E9a180b79D9\", \"formControlName\", \"burnTokenAddress\", 3, \"keyup\"], [\"burnTokenAddress\", \"\"], [4, \"ngIf\"], [1, \"lock-liquidity-form-container\"], [1, \"input-label\"], [2, \"font-weight\", \"bold\"], [\"appTwoDigitDecimaNumber\", \"\", \"matInput\", \"\", \"maxlength\", \"16\", \"placeholder\", \"e.g. 1000\", 3, \"ngModel\", \"ngModelChange\"], [\"color\", \"primary\", \"type\", \"button\", \"mat-raised-button\", \"\"], [\"min\", \"0\", \"step\", \"1\", \"thumbLabel\", \"\", \"max\", \"100\", 3, \"disabled\", \"displayWith\", \"click\", \"input\"], [1, \"liquidity-form-buttons-container\"], [\"id\", \"burnButton\", \"color\", \"primary\", \"type\", \"button\", \"mat-raised-button\", \"\", 1, \"burnButton\", 3, \"click\"], [\"size\", \"25\", 3, \"name\"]],\n    template: function BurnTokensComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\", 0);\n        i0.ɵɵelementStart(1, \"form\", 1);\n        i0.ɵɵelementStart(2, \"mat-form-field\", 2);\n        i0.ɵɵelementStart(3, \"mat-label\");\n        i0.ɵɵtext(4, \"Token address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"input\", 3, 4);\n        i0.ɵɵlistener(\"keyup\", function BurnTokensComponent_Template_input_keyup_5_listener() {\n          return ctx.burnTokenInputKeyUp();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(7, BurnTokensComponent_mat_error_7_Template, 2, 0, \"mat-error\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-card\", 6);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵelementStart(10, \"span\", 8);\n        i0.ɵɵtext(11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"span\", 8);\n        i0.ɵɵtext(13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(14, \"br\");\n        i0.ɵɵelementStart(15, \"div\", 7);\n        i0.ɵɵelementStart(16, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function BurnTokensComponent_Template_input_ngModelChange_16_listener($event) {\n          return ctx.burnTokenForm.amount = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 10);\n        i0.ɵɵtext(18, \" Max \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"br\");\n        i0.ɵɵelementStart(20, \"mat-slider\", 11);\n        i0.ɵɵlistener(\"click\", function BurnTokensComponent_Template_mat_slider_click_20_listener() {\n          return ctx.onClickEvent(ctx.burnTokenAddressInputFormGroup.controls.burnTokenAddress.value);\n        })(\"input\", function BurnTokensComponent_Template_mat_slider_input_20_listener($event) {\n          return ctx.onSlideBurn($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"br\");\n        i0.ɵɵelementStart(22, \"div\", 12);\n        i0.ɵɵelementStart(23, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function BurnTokensComponent_Template_button_click_23_listener() {\n          return ctx.openBurnTokensDialog();\n        });\n        i0.ɵɵelement(24, \"angular-emojis\", 14);\n        i0.ɵɵtext(25, \" Burn \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.burnTokenAddressInputFormGroup);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", !ctx.burnTokenAddressInputFormGroup.controls[\"burnTokenAddress\"].valid && ctx.burnTokenAddressInputFormGroup.controls[\"burnTokenAddress\"].touched);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"TOKEN \", ctx.burnTokenForm == null ? null : ctx.burnTokenForm.tokenName, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.tokenBalance);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.burnTokenForm.amount);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.burnTokenAddressInputFormGroup.controls[\"burnTokenAddress\"].valid)(\"displayWith\", ctx.formatLabel);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"name\", \"fire\");\n      }\n    },\n    directives: [i5.MatCard, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i6.MatFormField, i6.MatLabel, i7.MatInput, i2.DefaultValueAccessor, i2.MaxLengthValidator, i2.NgControlStatus, i2.FormControlName, i8.NgIf, i9.TwoDigitDecimaNumberDirective, i2.NgModel, i10.MatButton, i11.MatSlider, i12.AngularEmojisComponent, i6.MatError],\n    styles: [\"[_nghost-%COMP%]     .mat-form-field-outline:not(:invalid){color:#fff}\"]\n  });\n  return BurnTokensComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}