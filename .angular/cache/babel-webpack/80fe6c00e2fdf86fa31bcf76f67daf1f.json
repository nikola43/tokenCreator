{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { DevNetworks } from '../../services/Networks';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/web3.service\";\nimport * as i2 from \"src/utils/NotificationUtil\";\nimport * as i3 from \"@angular/material/form-field\";\nimport * as i4 from \"@angular/material/select\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\n\nfunction NetworkSelectorComponent_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 6);\n    i0.ɵɵelement(1, \"img\", 3);\n    i0.ɵɵelementStart(2, \"span\", 7);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const network_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", network_r2.index);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", network_r2.image, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(network_r2.name);\n  }\n}\n\nexport let NetworkSelectorComponent = /*#__PURE__*/(() => {\n  class NetworkSelectorComponent {\n    constructor(web3Service, notificationUtils) {\n      this.web3Service = web3Service;\n      this.notificationUtils = notificationUtils;\n      this.networks = DevNetworks;\n      this.currentNetwork = 0;\n      this.lastCurrentNetwork = 0;\n      this.selectedNetwork = new EventEmitter();\n    }\n\n    ngOnInit() {} // tslint:disable-next-line:typedef\n\n\n    networkSelectChange(changeEvent) {\n      return __awaiter(this, void 0, void 0, function* () {//this.notificationUtils.showSnackBar('Currently it only works in the BSC. The other networks will be soon.', SnackBarColorEnum.Red);\n        // try {\n        //   const changeNetworkResult = await this.web3Service.web3.request({\n        //     method: 'wallet_switchEthereumChain',\n        //     params: [{chainId: this.networks[changeEvent.value].params.chainId}],\n        //   });\n        //   console.log({changeNetworkResult});\n        // } catch (switchError) {\n        //   // This error code indicates that the chain has not been added to MetaMask.\n        //   if (switchError.code === 4902) {\n        //     try {\n        //       const addNetworkResult =  await this.web3Service.web3.request({\n        //         method: 'wallet_addEthereumChain',\n        //         params: [this.networks[changeEvent.value].params],\n        //       });\n        //       console.log({addNetworkResult});\n        //     } catch (addError) {\n        //       // handle \"add\" error\n        //       console.log(addError);\n        //       this.currentNetwork = this.lastCurrentNetwork;\n        //       return false;\n        //     }\n        //   }\n        //   // handle other \"switch\" errors\n        //   console.log(switchError);\n        //   // rejected\n        //   if (switchError.code === 4001) {\n        //   }\n        //   this.currentNetwork = this.lastCurrentNetwork;\n        //   // this.currentNetwork = changeEvent.value;\n        //   return false;\n        // }\n        // this.lastCurrentNetwork = this.currentNetwork;\n        // console.log(this.currentNetwork);\n        // this.selectedNetwork.emit(this.currentNetwork);\n      });\n    }\n\n  }\n\n  NetworkSelectorComponent.ɵfac = function NetworkSelectorComponent_Factory(t) {\n    return new (t || NetworkSelectorComponent)(i0.ɵɵdirectiveInject(i1.Web3Service), i0.ɵɵdirectiveInject(i2.NotificationUtils));\n  };\n\n  NetworkSelectorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NetworkSelectorComponent,\n    selectors: [[\"app-network-selector\"]],\n    outputs: {\n      selectedNetwork: \"selectedNetwork\"\n    },\n    decls: 10,\n    vars: 4,\n    consts: [[\"appearance\", \"fill\"], [\"panelClass\", \"my-select-panel-class\", 3, \"value\", \"selectionChange\", \"valueChange\"], [\"matRef\", \"\"], [2, \"width\", \"25px\", \"height\", \"25px\", 3, \"src\"], [2, \"margin-left\", \"5px !important\", \"font-weight\", \"bold\", \"color\", \"white\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [2, \"margin-left\", \"5px !important\", \"font-weight\", \"bold\"]],\n    template: function NetworkSelectorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-form-field\", 0);\n        i0.ɵɵelementStart(1, \"mat-label\");\n        i0.ɵɵtext(2, \"Network\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"mat-select\", 1, 2);\n        i0.ɵɵlistener(\"selectionChange\", function NetworkSelectorComponent_Template_mat_select_selectionChange_3_listener($event) {\n          return ctx.networkSelectChange($event);\n        })(\"valueChange\", function NetworkSelectorComponent_Template_mat_select_valueChange_3_listener($event) {\n          return ctx.currentNetwork = $event;\n        });\n        i0.ɵɵelementStart(5, \"mat-select-trigger\");\n        i0.ɵɵelement(6, \"img\", 3);\n        i0.ɵɵelementStart(7, \"span\", 4);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, NetworkSelectorComponent_mat_option_9_Template, 4, 3, \"mat-option\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"value\", ctx.currentNetwork);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"src\", ctx.networks[ctx.currentNetwork].image, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.networks[ctx.currentNetwork].name);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.networks);\n      }\n    },\n    directives: [i3.MatFormField, i3.MatLabel, i4.MatSelect, i4.MatSelectTrigger, i5.NgForOf, i6.MatOption],\n    styles: [\"[_nghost-%COMP%]     mat-form-field{margin-top:3vh;margin-right:1vw;text-align:center}[_nghost-%COMP%]     .mat-form-field-appearance-fill .mat-form-field-flex{padding:.3em .3em 0}\"]\n  });\n  return NetworkSelectorComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}